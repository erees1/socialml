
def filter_array(arr, remove_hyperlinks, remove_words, max_message_length):
    """Filter array generated by an extractor
    Filter levels: 0 = don't remove, 1 = remove words, 2 = remove messages, 3 = remove conversation

    Arguments:
        arr {list[list]} -- array generated by an Extractor
        remove_hyperlinks {int} -- filter level of which to remove hyperlinks as above
        remove_words {tuple(int, list[words])} -- tuple of filter level and list of words to match
        max_message_length {tuple(int, int)} -- tuple of filter level and the maximum length (in words) of a message

    Returns:
        [list[list]] -- filtered array
    """
    filtered_arr = []
    for conversation in arr:
        filtered_conversation = []
        conversation_has_hyperlinks_present = False
        conversaiton_has_unwanted_words = False
        conversation_has_messages_over_max_length = False

        for message in conversation:
            message, has_hyperlinks_present, has_unwanted_words, is_over_max_length = _check_message(
                message,
                remove_hyperlinks,
                remove_words,
                max_message_length
            )

            if _check_filter_conditions(
                has_unwanted_words,
                remove_words[0],
                has_hyperlinks_present,
                remove_hyperlinks,
                is_over_max_length,
                max_message_length[0],
                2
            ):
                filtered_conversation.append(message)

                if has_hyperlinks_present:
                    conversation_has_hyperlinks_present = True
                if has_unwanted_words:
                    conversaiton_has_unwanted_words = True
                if is_over_max_length:
                    conversation_has_messages_over_max_length = True

        if _check_filter_conditions(
            conversaiton_has_unwanted_words,
            remove_words[0],
            conversation_has_hyperlinks_present,
            remove_hyperlinks,
            conversation_has_messages_over_max_length,
            max_message_length[0],
            3
        ):
            filtered_arr.append(filtered_conversation)

    return filtered_arr


def _check_filter_conditions(
        has_unwanted_words,
        word_level,
        has_hyperlinks,
        hyperlink_level,
        is_over_max_length,
        length_level,
        actual_filter_level
):
    filter_passed = (
        (not (has_unwanted_words and word_level == actual_filter_level))
        and (not (has_hyperlinks and hyperlink_level == actual_filter_level))
        and (not (is_over_max_length and length_level == actual_filter_level))
    )

    return filter_passed


def _check_message(message, remove_hyperlinks, remove_words, max_message_length):
    hyperlinks_present = _has_hyperlink(message)
    words_present = _has_word(message, remove_words[1])
    is_over_max_length = (len(message.split(' ')) > max_message_length[1])
    if hyperlinks_present and remove_hyperlinks == 1:
        message = ' '.join([i for i in message.split(" ") if not _has_hyperlink(i)])
    if words_present and remove_words[0] == 1:
        message = ' '.join([i for i in message.split(" ") if not _has_word(i, remove_words[1])])
    if is_over_max_length and max_message_length[0] == 1:
        message = ' '.join([word for word in message.split(" ")[:max_message_length[1]]])

    return message, hyperlinks_present, words_present, is_over_max_length


def _has_word(text, words):
    words_present = any(word in text for word in words)
    return words_present


def _has_hyperlink(text):
    if 'www' in text or 'http' in text:
        return True
    else:
        return False
